COMPILER Transform


/*--------------------------------------------------------------------------*/
CHARACTERS
	  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz".    
	  binary = "01".
	  digit = binary + "23456789".
	  hexdig = digit + "abcdefABCEDF".
	  dot = '.'.
	  under = '_' .
	  path = digit + letter + dot + under.
	  quote = '"'.
	  apostrophe = "'".
	  backslash = "\\".
	  forwardslash = '/'.
	  pathSep = backslash + forwardslash.
	  equ = '='.
	  lf  = '\n'.
	  cr  = '\r'.
	  tab = '\t'.

	//anyButQuote = ANY - quote - cr - lf.
	//anyButApostrophe = ANY - apostrophe - cr - lf.
	anyButEndOfLine = ANY - cr - lf.

TOKENS
	IDENT					= letter { under | letter}.
	URI						= letter { path } ":" path { path } [ {pathSep path {path}}].
	FLOAT					= binary [dot digit {digit}] "f".
	INT						= digit {digit}.
//	STRING1					= quote {anyButQuote} quote.
//	STRING2					= apostrophe {anyButApostrophe} apostrophe.
	
IGNORE tab + cr + lf


PRODUCTIONS


Transform					=	"material" //IDENT [":" Path]
								"{"
									{ Sampler
									| Blend
									| Rasterizer
									| Stencil
									| Texture
									}
								"}" .

/* TEXTURE */
Texture						=	( "tex" | "texture" ) Uri<ref _material.texture>.
/* /TEXTURE */

/* STENCIL */
Stencil						=	( StencilState
								| DepthBufferEnable
								| DepthBufferWriteEnable
								| TwoSidedStencilMode
								| StencilEnable
								| StencilMask
								| ReferenceStencil
								| StencilWriteMask
								| CounterClockwiseStencilDepthBufferFail
								| CounterClockwiseStencilFail
								| CounterClockwiseStencilPass
								| StencilDepthBufferFail
								| StencilPass
								| StencilFail
								| StencilFunction
								| CounterClockwiseStencilFunction
								| DepthBufferFunction
								).

StencilState				=	"depth" StencilStates.
StencilStates				=	( "default"															(. _material.SetDepthStencilState(XnaGraphics.DepthStencilState.Default); .) 
								| "read"															(. _material.SetDepthStencilState(XnaGraphics.DepthStencilState.DepthRead); .) 
								| "none"															(. _material.SetDepthStencilState(XnaGraphics.DepthStencilState.None); .) 
								).

DepthBufferEnable			=	"depth_check" Bool<ref _material.DepthBufferEnable>.
DepthBufferWriteEnable		=	"depth_write" Bool<ref _material.DepthBufferWriteEnable>.
StencilEnable				=	"depth_stencil" Bool<ref _material.StencilEnable>.
StencilMask					=	"stencil_mask" Int<ref _material.StencilMask> .
ReferenceStencil			=	"stencil_ref" Int<ref _material.ReferenceStencil> .
StencilWriteMask			=	"stencil_write" Int<ref _material.StencilWriteMask> .
TwoSidedStencilMode			=	"stencil_two_sided"  Bool<ref _material.TwoSidedStencilMode>.

CounterClockwiseStencilDepthBufferFail		=	"depth_counter_fail"  StencilOperation<ref _material.CounterClockwiseStencilDepthBufferFail>.
CounterClockwiseStencilFail					=	"stencil_counter_fail"  StencilOperation<ref _material.CounterClockwiseStencilFail>.
CounterClockwiseStencilPass					=	"stencil_counter_pass"  StencilOperation<ref _material.CounterClockwiseStencilPass>.
StencilDepthBufferFail						=	"depth_fail"  StencilOperation<ref _material.StencilDepthBufferFail>.
StencilPass									=	"stencil_pass"  StencilOperation<ref _material.StencilPass>.
StencilFail									=	"stencil_fail"  StencilOperation<ref _material.StencilFail>.

StencilOperation<ref XnaGraphics.StencilOperation s>
							=	( "keep"															(. s = XnaGraphics.StencilOperation.Keep; .)
								| "zero"															(. s = XnaGraphics.StencilOperation.Zero; .)
								| "replace"															(. s = XnaGraphics.StencilOperation.Replace; .)
								| "inc"																(. s = XnaGraphics.StencilOperation.Increment; .)
								| "dec"																(. s = XnaGraphics.StencilOperation.Decrement; .)
								| "inc_sat"															(. s = XnaGraphics.StencilOperation.IncrementSaturation; .)
								| "dec_sat"															(. s = XnaGraphics.StencilOperation.DecrementSaturation; .)
								| "invert"															(. s = XnaGraphics.StencilOperation.Invert; .)
								).

StencilFunction						=	"stencil_func"  CompareFunction<ref _material.StencilFunction>.
CounterClockwiseStencilFunction		=	"counter_stencil_func"  CompareFunction<ref _material.CounterClockwiseStencilFunction>.
DepthBufferFunction					=	"depth_func"  CompareFunction<ref _material.DepthBufferFunction>.

CompareFunction<ref XnaGraphics.CompareFunction c>
									=	( "always"													(. c = XnaGraphics.CompareFunction.Always; .)
										| "never"													(. c = XnaGraphics.CompareFunction.Never; .)
										| "less"													(. c = XnaGraphics.CompareFunction.Less; .)
										| "less_eq"													(. c = XnaGraphics.CompareFunction.LessEqual; .)
										| "eq"														(. c = XnaGraphics.CompareFunction.Equal; .)
										| "greater_eq"												(. c = XnaGraphics.CompareFunction.GreaterEqual; .)
										| "greater"													(. c = XnaGraphics.CompareFunction.Greater; .)
										| "not_eq"													(. c = XnaGraphics.CompareFunction.NotEqual; .)
										) .
/* /STENCIL */

/* RASTERIZER */
Rasterizer					=	( RasterizerState
								| DepthBias
								| SlopeScaleDepthBias
								| MultiSampleAntiAlias
								| CullMode
								| FillMode
								).

RasterizerState				=	"rasterizer" RasterizerStates.
RasterizerStates			=	( "cullclockwise"													(. _material.SetRasterizerState(XnaGraphics.RasterizerState.CullClockwise); .)
								| "cullcounterclockwise"											(. _material.SetRasterizerState(XnaGraphics.RasterizerState.CullCounterClockwise); .)
								| "cullnone"														(. _material.SetRasterizerState(XnaGraphics.RasterizerState.CullNone); .)
								).

DepthBias					=	"depth_bias" Float<ref _material.DepthBias>.
SlopeScaleDepthBias			=	"slope_Depth_bias" Float<ref _material.SlopeScaleDepthBias>.
MultiSampleAntiAlias		=	( "multi_alias" | "multi_sample" | "anti_alias") Bool<ref _material.MultiSampleAntiAlias>.
CullMode					=	( "cull" | "cull_mode") CullModes.
CullModes					=	( "none"															(. _material.CullMode = XnaGraphics.CullMode.None; .)
								| ("clock" | "clockwise")											(. _material.CullMode = XnaGraphics.CullMode.CullClockwiseFace; .)
								| ("counter" | "counter_clock" | "counter_clockwise")				(. _material.CullMode = XnaGraphics.CullMode.CullCounterClockwiseFace; .)
								).
FillMode					=	( "fill" | "fill_mode" ) FillModes.
FillModes					=	( "solid"															(. _material.FillMode = XnaGraphics.FillMode.Solid; .)
								| ("wire" | "wire_frame")											(. _material.FillMode = XnaGraphics.FillMode.WireFrame; .)
								).
/* /RASTERIZER */

/* BLEND */
Blend						=	( AlphaBlend
								| ColorBlend
								| AlphaSourceBlend
								| AlphaDestinationBlend
								| ColorSourceBlend
								| ColorDestinationBlend
								| BlendFactor
								| ColorWriteChannels
								| MultiSampleMask
								| BlendState
								) .

BlendState					=	"blend" BlendStates.
BlendStates					=	( ("add" | "additive")												(. _material.SetBlendState(XnaGraphics.BlendState.Additive); .)
								| ("alpha" | "alpha_blend")											(. _material.SetBlendState(XnaGraphics.BlendState.AlphaBlend); .)
								| ("non" | "pre" | "nonpremultiplied")								(. _material.SetBlendState(XnaGraphics.BlendState.NonPremultiplied); .)
								| "opaque"															(. _material.SetBlendState(XnaGraphics.BlendState.Opaque); .)
								).

MultiSampleMask				=	"multi_sample_mask" Int<ref _material.MultiSampleMask> .
AlphaBlend					=	"alpha_blend" BlendFunction<ref _material.AlphaBlendFunction> .
ColorBlend					=	"color_blend" BlendFunction<ref _material.ColorBlendFunction> .
AlphaSourceBlend			=   "alpha_src" BlendMethod<ref _material.AlphaSourceBlend>.
AlphaDestinationBlend		=   "alpha_dst" BlendMethod<ref _material.AlphaDestinationBlend>.
ColorSourceBlend			=   "color_src" BlendMethod<ref _material.ColorSourceBlend>.
ColorDestinationBlend		=   "color_dst" BlendMethod<ref _material.ColorDestinationBlend>.
BlendFactor					=	"blend_factor" Color4<ref _material.BlendFactor>.
ColorWriteChannels			=	"write_channel" 
								( "0" ColorWriteChannel<ref _material.ColorWriteChannels>
								| "1" ColorWriteChannel<ref _material.ColorWriteChannels1>
								| "2" ColorWriteChannel<ref _material.ColorWriteChannels2>
								| "3" ColorWriteChannel<ref _material.ColorWriteChannels3>
								).	

ColorWriteChannel<ref XnaGraphics.ColorWriteChannels c>												(. c = XnaGraphics.ColorWriteChannels.None; .)
							=	ColorWriteChannelValue<ref c> {ColorWriteChannelValue<ref c>}.
ColorWriteChannelValue<ref XnaGraphics.ColorWriteChannels c>
					 		=	( "none"															
								| "red"																(. c |= XnaGraphics.ColorWriteChannels.Red; .)
								| "green"															(. c |= XnaGraphics.ColorWriteChannels.Green; .)
								| "blue"															(. c |= XnaGraphics.ColorWriteChannels.Blue; .)
								| "Alpha"															(. c |= XnaGraphics.ColorWriteChannels.Alpha; .)
								| "all"																(. c |= XnaGraphics.ColorWriteChannels.All; .)
								). 

BlendFunction<ref XnaGraphics.BlendFunction r>
							=	( "add"																(. r = XnaGraphics.BlendFunction.Add; .)
								| "subtract"														(. r = XnaGraphics.BlendFunction.Subtract; .)
								| "reversesubtract"													(. r = XnaGraphics.BlendFunction.ReverseSubtract; .)
								| "max"																(. r = XnaGraphics.BlendFunction.Max; .)
								| "min"																(. r = XnaGraphics.BlendFunction.Min; .)
								).


BlendMethod<ref XnaGraphics.Blend r>
							=	( ("one" | "1")														(. r = XnaGraphics.Blend.One; .)
								| ("zero" | "0")													(. r = XnaGraphics.Blend.Zero; .)
								| "src_color"														(. r = XnaGraphics.Blend.SourceColor; .)
								| "inv_src_color"													(. r = XnaGraphics.Blend.InverseSourceColor; .)
								| "src_alpha"														(. r = XnaGraphics.Blend.SourceAlpha; .)
								| "inv_src_alpha"													(. r = XnaGraphics.Blend.InverseSourceAlpha; .)
								| "dst_color"														(. r = XnaGraphics.Blend.DestinationColor; .)
								| "inv_dst_color"													(. r = XnaGraphics.Blend.InverseDestinationColor; .)
								| "dst_alpha"														(. r = XnaGraphics.Blend.DestinationAlpha; .)
								| "inv_dst_alpha"													(. r = XnaGraphics.Blend.InverseDestinationAlpha; .)
								| "blend_factor"													(. r = XnaGraphics.Blend.BlendFactor; .)
								| ("inv_blend" | "inv_blend_factor")								(. r = XnaGraphics.Blend.InverseBlendFactor; .)
								| ("src_alpha_sat" | "src_alpha_saturation")						(. r = XnaGraphics.Blend.SourceAlphaSaturation; .)
								).
/* /BLEND */

/* SAMPLER */
Sampler						=	( SamplerState
								| AddressU 
								| AddressW
								| AddressV
								| Address
								| MaxAnisotropy
								| MaxMipLevel
								| MipMapLevelOfDetailBias
								).

SamplerState				=	"sampler" SamplerStates.

SamplerStates				=   ( "anisotropic"									
									( "wrap"														(. _material.SetSamplerState(XnaGraphics.SamplerState.AnisotropicWrap); .)
									| "clamp"														(. _material.SetSamplerState(XnaGraphics.SamplerState.AnisotropicClamp); .)
									)
								| "linear"															
									( "wrap"														(. _material.SetSamplerState(XnaGraphics.SamplerState.LinearWrap); .)
									| "clamp"														(. _material.SetSamplerState(XnaGraphics.SamplerState.LinearClamp); .)
									)
								| "point"
									( "wrap"														(. _material.SetSamplerState(XnaGraphics.SamplerState.PointWrap); .)
									| "clamp"														(. _material.SetSamplerState(XnaGraphics.SamplerState.PointClamp); .)
									)
								).

AddressU					=	"addressu" TextureAddressMode<ref _material.AddressU> .
AddressW					=	"addressw" TextureAddressMode<ref _material.AddressW> .
AddressV					=	"addressv" TextureAddressMode<ref _material.AddressV> .
Address 					=	"address"															(. var t = XnaGraphics.TextureAddressMode.Wrap; .)
								 TextureAddressMode<ref t>											(. _material.SetTextureAddressMode(t); .).

TextureAddressMode<ref XnaGraphics.TextureAddressMode t>	
							=	( "wrap"															(. t = XnaGraphics.TextureAddressMode.Wrap; .)
								| "clamp"															(. t = XnaGraphics.TextureAddressMode.Clamp; .)
								| "mirror"															(. t = XnaGraphics.TextureAddressMode.Mirror; .)
								).

MaxAnisotropy				=   "MaxAnisotropy" Int<ref _material.MaxAnisotropy> .
MaxMipLevel					=	"MaxMipLevel" Int<ref _material.MaxMipLevel> .
MipMapLevelOfDetailBias		=   "MipMapLevelOfDetailBias" Float<ref _material.MipMapLevelOfDetailBias> .


/* /SAMPLER */

/* COMMON */

Bool<ref bool b>			=	( ("0" | "false")													(. b = false; .)
								| ("1" | "true")													(. b = true; .)
								).

Int<ref int i>				=	INT																	(. i = Convert.ToInt32(t.val); .).

Float<ref float f>			=	FLOAT																(. f = Convert.ToSingle(t.val); .).

Color4<ref Xna.Color c>																				(. float a=1f, r=1f, g=1f, b=1f; .)
							=	Float<ref r> Float<ref b> Float<ref g> [Float<ref a>]				(. c = new Xna.Color(r, g, b, a); .).
/* /COMMON */
Uri<ref Atma.Engine.GameUri uri>	=	URI															(. uri = t.val; .).


END Transform.